<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MessageErrorBorrowedBook" xml:space="preserve">
    <value>Este livro já está emprestado para está pessoa</value>
  </data>
  <data name="MessageErrorFormatEmail" xml:space="preserve">
    <value>Email inválido</value>
  </data>
  <data name="MessageErrorInvalidDocument" xml:space="preserve">
    <value>CPF inválido</value>
  </data>
  <data name="MessageErrorLengthAuthor" xml:space="preserve">
    <value>O nome do autor deve conter entre 2 e 200 caracteres</value>
  </data>
  <data name="MessageErrorLengthCity" xml:space="preserve">
    <value>O cidade deve ser informado</value>
  </data>
  <data name="MessageErrorLengthCountry" xml:space="preserve">
    <value>O pais deve conter entre 2 e 50 caracteres</value>
  </data>
  <data name="MessageErrorLengthCPF" xml:space="preserve">
    <value>O CPF deve conter 11 caracteres</value>
  </data>
  <data name="MessageErrorLengthDistrict" xml:space="preserve">
    <value>O bairro deve conter entre 2 e 100 caracteres</value>
  </data>
  <data name="MessageErrorLengthGenre" xml:space="preserve">
    <value>O genero deve conter entre 2 e 100 caracteres</value>
  </data>
  <data name="MessageErrorLengthName" xml:space="preserve">
    <value>O nome deve conter entre 2 e 200 caracteres</value>
  </data>
  <data name="MessageErrorLengthPassword" xml:space="preserve">
    <value>A senha deve conter pelo menos 8 caracteres</value>
  </data>
  <data name="MessageErrorLengthState" xml:space="preserve">
    <value>O estado deve conter entre 2 e 50 caracteres</value>
  </data>
  <data name="MessageErrorLengthStreet" xml:space="preserve">
    <value>O logradouro deve conter entre 2 e 200 caracteres</value>
  </data>
  <data name="MessageErrorLengthTitle" xml:space="preserve">
    <value>O título deve conter entre 2 e 200 caracteres</value>
  </data>
  <data name="MessageErrorLengthZipCode" xml:space="preserve">
    <value>O CEP deve conter 8 caracteres</value>
  </data>
  <data name="MessageErrorNotEmptyAuthor" xml:space="preserve">
    <value>O autor deve ser informado</value>
  </data>
  <data name="MessageErrorNotEmptyCity" xml:space="preserve">
    <value>O cidade deve conter entre 2 e 100  caracteres</value>
  </data>
  <data name="MessageErrorNotEmptyCountry" xml:space="preserve">
    <value>O país deve ser informado</value>
  </data>
  <data name="MessageErrorNotEmptyCPF" xml:space="preserve">
    <value>O CPF deve ser informado</value>
  </data>
  <data name="MessageErrorNotEmptyDateExpectedReturn" xml:space="preserve">
    <value>A data de devolução prevista deve ser informada</value>
  </data>
  <data name="MessageErrorNotEmptyDistrict" xml:space="preserve">
    <value>O bairro deve ser informado</value>
  </data>
  <data name="MessageErrorNotEmptyEmail" xml:space="preserve">
    <value>O e-mail deve ser informado</value>
  </data>
  <data name="MessageErrorNotEmptyGenre" xml:space="preserve">
    <value>O gênero deve ser informado</value>
  </data>
  <data name="MessageErrorNotEmptyName" xml:space="preserve">
    <value>O nome deve ser informado</value>
  </data>
  <data name="MessageErrorNotEmptyPassword" xml:space="preserve">
    <value>A senha deve ser informada</value>
  </data>
  <data name="MessageErrorNotEmptyPhone" xml:space="preserve">
    <value>O número de telefone ou celular deve ser informado</value>
  </data>
  <data name="MessageErrorNotEmptyState" xml:space="preserve">
    <value>O estado deve ser informado</value>
  </data>
  <data name="MessageErrorNotEmptyStreet" xml:space="preserve">
    <value>O logradouro deve ser informado</value>
  </data>
  <data name="MessageErrorNotEmptyTitle" xml:space="preserve">
    <value>O título deve ser informado</value>
  </data>
  <data name="MessageErrorNotEmptyZipCode" xml:space="preserve">
    <value>CEP deve ser  informado</value>
  </data>
  <data name="MessageErrorPasswordCompare" xml:space="preserve">
    <value>As senhas não conferem</value>
  </data>
</root>